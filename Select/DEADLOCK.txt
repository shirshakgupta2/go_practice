Deadlock:
 When you trying to read or write data from the channel but the channel does not have value. So, it blocks the current execution of the goroutine and passes the control to other goroutines, but if there is no other goroutine is available or other goroutines are sleeping due to 
this situation program will crash. This phenomenon is known as deadlock.

// Go program to illustrate
// how deadlock arises
package main

// Main function
func main() {

	// Creating a channel
	// Here deadlock arises because
	// no goroutine is writing
	// to this channel so, the select
	// statement has been blocked forever
	c := make(chan int)
	select {
	case <-c:
	}
}



// Go program to illustrate how to resolve
// the deadlock problem using the default case
package main

import "fmt"

// Main function
func main() {

	// Creating a channel
	c := make(chan int)
	select {
	case <-c:
	default:
		fmt.Println("!.. Default case..!")
	}
}



// Go program to illustrate
// the execution of default case
package main

import "fmt"

// Main function
func main() {

	// Creating a channel
	var c chan int

	select {
	case x1 := <-c:
		fmt.Println("Value: ", x1)
	default:
		fmt.Println("Default case..!")
	}
}


